CONTEXTO PARA VIDEO EXPLICATIVO - SISTEMA DE GESTIÓN DE EMPLEADOS

ESTRUCTURA DEL PROYECTO:

1. CARPETA RAIZ (crud-nodejs-mysql-reactjs/)
   - README.md: Documentación principal del proyecto
   - .gitignore: Archivos excluidos del control de versiones
   - package.json: Configuración de dependencias del proyecto principal

2. CARPETA SERVER/ (Backend - API REST)
   - index.js: Servidor principal con Express.js
     * Configuración de CORS para permitir peticiones del frontend
     * Rutas CRUD para empleados (GET, POST, PUT, DELETE)
     * Rutas para estadísticas
     * Rutas para productos (compatibilidad)
     * Middleware para parsing JSON
   - db.js: Configuración de conexión a MySQL
     * Conexión a base de datos 'sistema_nomina'
     * Configuración de credenciales
   - database.sql: Script de creación de base de datos
     * Creación de tabla empleados
     * Creación de tabla productos
     * Datos de ejemplo (15 empleados)
     * Índices para optimización
   - package.json: Dependencias del backend
     * express, mysql2, cors, dotenv

3. CARPETA CLIENT/ (Frontend - React)
   - src/App.js: Componente principal de productos
     * Gestión de estado para productos
     * Formularios de creación/edición
     * Filtros avanzados por precio y categoría
     * Tabla con operaciones CRUD
   - src/Employees.js: Componente de gestión de empleados
     * Formulario completo de empleados
     * Validaciones de campos requeridos
     * Filtros por nombre, identificación y estado
     * Estadísticas en tiempo real
   - src/config.js: Configuración de la aplicación
     * URLs de la API
     * Configuración de endpoints
     * Función helper para construir URLs
   - src/App.css: Estilos principales
   - src/index.js: Punto de entrada de React
   - public/: Archivos estáticos (HTML, iconos, manifest)

FUNCIONALIDADES PRINCIPALES:

BACKEND (Node.js + Express + MySQL):
- API REST completa para empleados
- Validaciones de datos
- Manejo de errores
- CORS habilitado
- Conexión a MySQL con mysql2
- Endpoints: /empleados, /estadisticas, /productos, /categorias

FRONTEND (React + Material-UI):
- Interfaz moderna con Material-UI
- Componentes reutilizables
- Gestión de estado con hooks
- Formularios con validación
- Filtros y búsqueda
- Notificaciones con Snackbar
- Responsive design

BASE DE DATOS (MySQL):
- Tabla empleados con campos completos
- Tabla productos para compatibilidad
- Datos de ejemplo pre-cargados
- Índices para optimización
- Relaciones y constraints

FLUJO DE TRABAJO:
1. Usuario interactúa con la interfaz React
2. Frontend hace peticiones HTTP al backend
3. Backend procesa las peticiones y consulta MySQL
4. Datos se devuelven en formato JSON
5. Frontend actualiza la interfaz con los datos

TECNOLOGÍAS UTILIZADAS:
- Backend: Node.js, Express.js, MySQL2
- Frontend: React, Material-UI, JavaScript ES6+
- Base de datos: MySQL
- Herramientas: Git, npm

ORDEN DE EXPLICACIÓN RECOMENDADO:
1. Estructura general del proyecto
2. Configuración de la base de datos (database.sql)
3. Backend - conexión a BD (db.js)
4. Backend - API REST (index.js)
5. Frontend - configuración (config.js)
6. Frontend - componente empleados (Employees.js)
7. Frontend - componente productos (App.js)
8. Estilos y UI (App.css)
9. Funcionalidades CRUD en acción
10. Filtros y búsqueda
11. Estadísticas en tiempo real
